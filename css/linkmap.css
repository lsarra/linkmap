/* General */
html,
body {
  width: 110%;
  height: 110%;
  overflow: hidden;
  background-color: black;
  margin: 0px;
}

/* codebox 
It represents the textarea with the text or the linkmap
*/
#codebox {
  z-index: 100;
  position: fixed;
  margin-left: 50%;
  width: 50%;
  height: 100%;
  font-family: Courier;
  font-size: 18px;
  background-color: darkseagreen;
  color: white;
  display: none;
}

#codebox.visible {
  display: block;
}

#codebox::selection,
#codebox::-moz-selection {
  color: white;
  background-color: red;
}
/* infobox
A pop-up window that shows some information like
the link title and description.
It is placed at the mouse position with a quick animation
*/
#infobox {
  position: absolute;
  min-width: 300px;
  min-height: 150px;
  max-width: 400px;
  max-height: 600px;
  background: black;
  z-index: 99;
  color: white;
  padding: 10px;
  border-radius: 25px;
  margin: 20px;
  transition: opacity 200ms ease-in-out, left 200ms ease-in-out,
    top 200ms ease-in-out, width 200ms ease-in-out, height 200ms ease-in-out,
    transform 200ms ease-in-out;
  pointer-events: none;
  transform: scale(0.8);
  visibility: hidden;
  opacity: 0%;
}

#infobox.visible {
  transform: scale(1);
  visibility: visible;
  opacity: 80%;
}

#infobox h1 {
  font-size: 1.5em;
  font-family: "Helvetica";
  font-weight: bold;
  text-align: center;
}

#infobox p {
  font-family: "Helvetica";
  font-weight: 100;
  font-size: 1.2em;
}

/* toolbox 
It represents a small window with some settings 
(small buttons shown with icons)
*/
.toolbox {
  left: 0px;
  top: 0px;
  margin: 5px;
  padding: 10px;
  position: fixed;
  background-color: rgb(0, 0, 0, 0.5);
  font-family: "Arial Black";
  font-size: "24px";
  color: black;
  border-radius: 20px;
  display: block;
  z-index: 3000;
}

.toolbox p,
.toolbox a {
  margin: 0px;
  cursor: pointer;
  transition: color 100ms ease-in-out;
}

.toolbox p:hover {
  color: palegoldenrod;
}

.toolbox p.selected {
  color: palegreen;
}

/* linkmap
It is the area where the map is built.
We create a large DIV and displace it so that it is centered in the screen.
*/
#linkmap {
  position: absolute;
  width: 10000px;
  height: 10000px;
  background-color: wheat;
  transform-origin: 0 0;
}

#linkmap:not(:active) {
  transition: transform 0.05s ease-in;
}

#linkmap > * {
  transform: translate(4000px, 4000px);
}

/* Objects that fit inside the linkmap */

/* container
A container is an objects that will contain other links.
Also other containers can be inserted forming a nested hierarchy
 */
.container {
  position: absolute;
  background-color: beige;
  text-align: center;
  width: 250px;
  min-height: 200px;
  min-width: 150px;
  left: 0;
  top: 20px;
  border-radius: 15px;
}

/* element
An objects that contains a title and a link
It can be nested inside a container but no object
can be dragged on top.
*/
.element {
  position: absolute;
  display: flex;
  align-items: center;
  background-color: darkorange;
  border-radius: 5px;
  left: 10px;
  top: 20px;
  min-height: 25px;
  min-width: 50px;
  padding-left: 10px;
  padding-right: 10px;
  padding-top: 3px;
  padding-bottom: 3px;
  color: white;
  font-family: "Arial Black";
  font-size: 13px;
}

.element:hover {
  border: 2px solid white;
}

.element a,
.element a:hover,
.element a:focus,
.element a:active {
  /* disable default link styles */
  text-decoration: none;
  color: inherit;
  vertical-align: middle;
}

.element.drag-enabled a {
  /* Drag and drop should not trigger the link */
  pointer-events: none;
}

.element.header {
  background-color: cadetblue;
  left: 20px;
  top: -10px;
}

/* Drag and drop
A draggable object is an element that can be dragged on the screen.
However, this is allowed only when drag-enabled is activated.
When dragging, we highlight the object that is being dragged.
If the object overlaps another container (which allows dragging),
this will also be highlighted.
*/
.draggable {
  box-sizing: border-box;
  transition: border 300ms ease-in-out, opacity 500ms ease-in-out;
}

.draggable.drag-enabled {
  border: 2px dashed gray;
  cursor: move;
}

.draggable.drag-enabled.dragging {
  z-index: 100;
  opacity: 50%;
  border: 2px solid yellow;
}

.draggable.drag-enabled:hover {
  border-width: 3px;
}

.container.draggable.drag-enabled.drag-target {
  border: 2px solid red;
}

.priority {
  /* Brings to front an element */
  /* It can be useful to bring to front the object
that is being dragged for example. */
  z-index: 50;
}
